 flex lexico.l
gcc.exe lex.yy.c -o Compilado.exe
.\Compilado.exe Donsola.txt



////////////////////////////////////// 


flex lexico.l                
bison -d -t sintactico.y     
gcc lex.yy.c sintactico.tab.c
.\a                          
       




















bloque : PAR_IZ instrucciones PAR_DE
        ; 

preguntaIf : PREGUNTA PORCT comparaciones PORCT bloque preguntaElse
            ;

preguntaElse : PREGUNTA_CONTRARIA bloque
               | PREGUNTA_CONTRARIA preguntaIf
               | /* vacio */
               ;

comparaciones : comparacion comparacionesP
              ;

comparacionesP : OP_LOGICO comparacion comparacionesP 
               | /* vacio */
               ; 

comparacion : variable OP_RELACIONAL variable
            ;

instrucciones : instruccion instruccionesP
              ;

instruccionesP : instruccion instruccionesP 
            | /*vacio*/
            ;
instruccion : preguntaIf
            ;

variable :  ID
        | NUMERO
        ; 





{IMPRESION} {
    mostrarIdentificadores(); 
}

{ID} {  
    char nombre[50];
    strncpy(nombre, yytext, yyleng);
    nombre[yyleng] = '\0';
    int indice = buscarID(nombre);
    if (indice == -1) {
        agregarIdentificador(nombre); 
    }

}


#define MAX_IDENTIFICADORES 100

struct Identificador {
    char nombre[50];
    int valor;
};

struct Identificador tablaIdentificadores[MAX_IDENTIFICADORES];
int numIdentificadores = 0;

void agregarIdentificador(char* nombre) {
    strcpy(tablaIdentificadores[numIdentificadores].nombre, nombre);
    numIdentificadores++;
}

void mostrarIdentificadores() {
    printf("**** TABLA DE SIMBOLOS ****\n");
    printf("POSICION-------ID\n");
    for (int i = 0; i < numIdentificadores; i++) {
        printf("   %d           %s  \n", i, tablaIdentificadores[i].nombre);
    }
}

int buscarID(char* nombre) {
    for (int i = 0; i < numIdentificadores; i++) {
        if (strcmp(tablaIdentificadores[i].nombre, nombre) == 0) {
            return i; 
        }
    }
    return -1; 
}

